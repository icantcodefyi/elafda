// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id          String   @id @default(cuid())
    title       String
    slug        String   @unique // URL-friendly version of title
    description Json     // Tiptap JSON content
    lore        String?  // Highlighted lore block
    tweetLinks  String[] // Array of tweet/thread URLs
    images      String[] // Array of uploaded image URLs
    tags        String[] // Array of tags
    views       Int      @default(0)
    isDeleted   Boolean  @default(false) // Soft delete
    deletedAt   DateTime? // When deleted
    deletedBy   String?  // Admin who deleted
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    authorId  String
    author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    reactions Reaction[]
    comments  Comment[]

    @@index([title])
    @@index([slug])
    @@index([authorId])
    @@index([createdAt])
    @@index([isDeleted])
}

model Reaction {
    id     String      @id @default(cuid())
    type   ReactionType
    userId String
    postId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId]) // One reaction per user per post
    @@index([postId])
    @@index([userId])
}

enum ReactionType {
    LIKE
    DISLIKE
    FIRE
    HEART
    CRY
}

model Comment {
    id        String   @id @default(cuid())
    content   String   // Markdown content
    postId    String
    userId    String
    parentId  String?  // For nested comments/replies
    isDeleted Boolean  @default(false) // Soft delete
    deletedAt DateTime? // When deleted
    deletedBy String?  // Admin who deleted
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    parent    Comment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
    replies   Comment[]      @relation("CommentReplies")
    votes     CommentVote[]

    @@index([postId])
    @@index([userId])
    @@index([parentId])
    @@index([createdAt])
    @@index([isDeleted])
}

model CommentVote {
    id        String    @id @default(cuid())
    type      VoteType
    userId    String
    commentId String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([userId, commentId]) // One vote per user per comment
    @@index([commentId])
    @@index([userId])
}

enum VoteType {
    UPVOTE
    DOWNVOTE
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    reactions     Reaction[]
    comments      Comment[]
    commentVotes  CommentVote[]
}

enum UserRole {
    USER
    ADMIN
    BANNED
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
